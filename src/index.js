import { Markup, Telegraf } from 'telegraf';
import { configuration }  from './config.js';
import  { keyboards } from './keyboards.js'
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import * as path from "node:path";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const bot = new Telegraf(configuration.telegramToken, {});
console.log('bot listing');

bot.telegram.setMyDescription('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ Aura!\n' +
    '–¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –±—Ä–µ–Ω–¥–æ–º Aura.\n' +
    '–£–∑–Ω–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç.')

let chatIdFromUser = null;
let locationUserInMenu;

bot.telegram.setMyCommands([
    {
      command: 'start', description: '–ù–∞—á–∞—Ç—å'
    },
    {
        command: 'help', description: '–ü–æ–º–æ—â—å'
    },
    {
        command: 'menu', description: '—Ç–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü'
    }

], chatIdFromUser)


bot.start(async (ctx) => {
    chatIdFromUser = ctx.message.chat.id;
    console.log(`chat_id: ${chatIdFromUser}`);
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:', keyboards.mainOptions);
});

bot.help(async (ctx) => await ctx.reply('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/start - –ù–∞—á–∞—Ç—å \n/help - –ü–æ–º–æ—â—å\n/menu - –í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'));

let idMessage;

bot.command('menu', async (ctx) => {
    idMessage = await ctx.reply('–í—ã –≤—ã—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboards.mainOptions);
})
bot.command('pages', (ctx) => {
    const chatId = ctx.chat.id;
    userPages[chatId] = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    const { text, keyboard } = getPageContent(userPages[chatId]);
    ctx.reply(text, keyboard);
});


bot.on('message', async (ctx) => {
    const text = ctx.text;
    const chatId = ctx.chat.id;
    const whoIsIt = ctx.from.first_name;
    try {
        if( text === 'Lash –∫–≤–µ—Å—Ç—ã') {
            const photoPath = path.resolve(__dirname, '../assets/img/tasks.jpeg');
            locationUserInMenu = 'Lash –∫–≤–µ—Å—Ç—ã';
            return ctx.replyWithPhoto(
                {
                    source: photoPath
                },
                {
                    caption: '–£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!ü©µ\n' +
                        '\n' +
                        '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ Lash-–∫–≤–µ—Å—Ç–∞—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —â–µ–¥—Ä—ã–µ –ø—Ä–∏–∑—ã üéÅ\n' +
                        '–£–∑–Ω–∞—Ç—å –æ –∫–≤–µ—Å—Ç–∞—Ö –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ üëáüèª \n' +
                        '\n' +
                        'AURA LASH | #INFO |#–í–∞–∂–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                    reply_markup: keyboards.tasksOptions.reply_markup
                })
        }
        else if( text === '–ü–æ–¥–¥–µ—Ä–∂–∫–∞') {
            // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
            const photoPath = path.resolve(__dirname, '../assets/img/support.jpeg');
            locationUserInMenu = '–ü–æ–¥–¥–µ—Ä–∂–∫–∞';
            console.log(whoIsIt)
            return ctx.replyWithPhoto(
                {
                    source: photoPath
                },
                {
                    caption: '–£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!ü©µ\n' +
                        '\n' +
                        '–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–ª—É–∂–±–æ–π –∑–∞–±–æ—Ç—ã AURA LASH, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!üëáüèª \n' +
                        '\n' +
                        'AURA LASH | #INFO | #–í–∞–∂–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                    reply_markup: keyboards.supportOptions
                }
            ).catch((error) => {
                console.error('–û—à–∏–±–∫–∞: ', error)
            })
        }
        else if (text === 'AURA LASH CLUB'){
            await ctx.reply('–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç AURA LASH CLUB', keyboards.chatOptions.reply_markup)
        }
        else if (text === '–≥—Ä—É–ø–ø–∞'){
            await sendMessageToGroup(chatId, '–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω');
        }
        else if(text === '–û –±—Ä–µ–Ω–¥–µ') {
            // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
            const photoPath = path.resolve(__dirname, '../assets/img/brand.jpeg');
            locationUserInMenu = '–û –±—Ä–µ–Ω–¥–µ';

            //ofm
            return ctx.replyWithPhoto(
                {
                    source: photoPath
                },
                {
                    caption: '–£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!ü©µ\n' +
                        '\n' +
                        '–ú—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ AURA LASH.\n' +
                        ' \n' +
                        '–ü–æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –±—Ä–µ–Ω–¥–æ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Åüëáüèª\n' +
                        '\n' +
                        'AURA LASH | #INFO |\n' +
                        '#–í–∞–∂–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                    reply_markup: keyboards.brandOptions
                }
            ).catch((error) => {
                console.error('–û—à–∏–±–∫–∞: ', error)
            })
        }
        else if(text === '–û–ø—Ç –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ') {
            locationUserInMenu = '–û–ø—Ç –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ';

            return ctx.reply( '–£ –Ω–∞—Å —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ–ø—Ç–∞: \n' +
                '–û—Ç 5 000 –¥–æ 24 999 —Ä—É–±. - 10%;\n' +
                ' –û—Ç 25 000 –¥–æ 49 999 —Ä—É–±. - 20%;\n' +
                ' –û—Ç 50 000 –¥–æ 99 999 —Ä—É–±. - 30%;\n' +
                ' –û—Ç 100 000 –¥–æ 799 999 - 40%;\n' +
                ' –ë–æ–ª–µ–µ 800 000 - 50%.', Markup.keyboard([{text: '–ù–∞–∑–∞–¥'}]));
        }
        else if(text === '–ù–∞–∑–∞–¥'){
            await ctx.reply('–¢—ã –≤—ã—à–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboards.mainOptions)
        }
        else {
            // let checkUp = await checkOnItemMenu(locationUserInMenu, menuItems);
            // console.log(checkUp)
            // if (checkUp){
            //     if(text === '–ù–∞–∑–∞–¥'){
            //         await ctx.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboards.mainOptions);
            //     }
            // }
            //await ctx.reply('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª.')
        }
    }
    catch (error) {
        console.error(error);
    }
});

async function checkOnItemMenu (text, menuItems) {
    console.log(text);
    return menuItems.includes(text);
}

bot.hears('–û–ø—Ç –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', (ctx) => ctx.reply('–í—ã –≤–æ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –û–ø—Ç –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ'));

async function sendMessageToGroup(chatId, message) {
    try {
        await bot.telegram.sendMessage(chatId, message);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}



const items = [
    '–≠–ª–µ–º–µ–Ω—Ç 1',
    '–≠–ª–µ–º–µ–Ω—Ç 2',
    '–≠–ª–µ–º–µ–Ω—Ç 3',
    '–≠–ª–µ–º–µ–Ω—Ç 4',
    '–≠–ª–µ–º–µ–Ω—Ç 5',
    '–≠–ª–µ–º–µ–Ω—Ç 6',
    '–≠–ª–µ–º–µ–Ω—Ç 7',
    '–≠–ª–µ–º–µ–Ω—Ç 8',
    '–≠–ª–µ–º–µ–Ω—Ç 9',
    '–≠–ª–µ–º–µ–Ω—Ç 10',
];

const userPages = {};

function getPageContent(page, itemsPerPage = 3) {
    const totalPages = Math.ceil(items.length / itemsPerPage);
    const start = page * itemsPerPage;
    const end = start + itemsPerPage;
    const pageItems = items.slice(start, end).join('\n');

    const prevButton = page > 0 ? Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'prev_page') : null;
    const nextButton = page < totalPages - 1 ? Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', 'next_page') : null;

    const buttons = [];
    if (prevButton) buttons.push(prevButton);
    if (nextButton) buttons.push(nextButton);

    const keyboard = Markup.inlineKeyboard([buttons]);

    return {
        text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}\n\n${pageItems}`,
        keyboard,
    };
}

bot.action('about_quests', async (ctx) => {
    const chatId = ctx.chat.id;
    await ctx.reply('–í—ã –≤–æ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –æ –∫–≤–µ—Ç–∞—Ö', keyboards.backOptions);
})

bot.action('current_quests', async (ctx) => {
    const chatId = ctx.chat.id;
    await ctx.reply('–¢—É—Ç —á—É—Ç—å-—á—É—Ç—å –ø–æ–≥–æ–¥—è —Ç—ã —Å–º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–≤–µ—Å—Ç—ã', keyboards.backOptions);
})

bot.action('support', async (ctx) => {
    const photoPath = path.resolve(__dirname, '../assets/img/support.jpeg');
    locationUserInMenu = '–ü–æ–¥–¥–µ—Ä–∂–∫–∞';
    await ctx.replyWithPhoto(
        {
            source: photoPath
        },
        {
            caption: '–£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!ü©µ\n' +
                '\n' +
                '–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–ª—É–∂–±–æ–π –∑–∞–±–æ—Ç—ã AURA LASH, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!üëáüèª \n' +
                '\n' +
                'AURA LASH | #INFO | #–í–∞–∂–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            reply_markup: keyboards.supportOptions
        }
    ).catch((error) => {
        console.error('–û—à–∏–±–∫–∞: ', error)
    })
})

bot.action('lash_quest',  async (ctx) => {
    const photoPath = path.resolve(__dirname, '../assets/img/tasks.jpeg');
    locationUserInMenu = 'Lash –∫–≤–µ—Å—Ç—ã';
    await ctx.replyWithPhoto(
        {
            source: photoPath
        },
        {
            caption: '–£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!ü©µ\n' +
                '\n' +
                '–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ Lash-–∫–≤–µ—Å—Ç–∞—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —â–µ–¥—Ä—ã–µ –ø—Ä–∏–∑—ã üéÅ\n' +
                '–£–∑–Ω–∞—Ç—å –æ –∫–≤–µ—Å—Ç–∞—Ö –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ üëáüèª \n' +
                '\n' +
                'AURA LASH | #INFO |#–í–∞–∂–Ω–∞—è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
            reply_markup: keyboards.tasksOptions.reply_markup
        }).catch((error) => {
            console.error('–û—à–∏–±–∫–∞: ', error)
        })
})

bot.action('chatAura', async (ctx) => {
    await ctx.reply('–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç AURA LASH CLUB', keyboards.chatOptions.reply_markup)
})

bot.action('next_page', (ctx) => {
    const chatId = ctx.chat.id;
    const totalPages = Math.ceil(items.length / 3);
    if (userPages[chatId] < totalPages - 1) {
        userPages[chatId] += 1; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    }
    const { text, keyboard } = getPageContent(userPages[chatId]);
    ctx.editMessageText(text, keyboard);
});

bot.action('test', async (ctx) => {
    await ctx.reply('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', keyboards.mainOptions);
})

bot.action('–ù–∞–∑–∞–¥', async(ctx) => {
    await ctx.reply('–¢—ã –≤—ã—à–µ–ª –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboards.mainOptions)
    })
bot.action('task', async(ctx) => {
    await ctx.reply('–¢—ã –≤—ã–±—Ä–∞–ª –∫–≤–µ—Å—Ç, –Ω–æ –æ–Ω–∏ –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', keyboards.mainOptions)
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.action('prev_page', (ctx) => {
    const chatId = ctx.chat.id;
    if (userPages[chatId] > 0) {
        userPages[chatId] -= 1; // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    }
    const { text, keyboard } = getPageContent(userPages[chatId]);
    ctx.editMessageText(text, keyboard);
});

bot.launch()